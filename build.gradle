import org.asciidoctor.gradle.jvm.AsciidoctorTask

// 그레이들(Gradle) 플러그인을 정의하는 블록입니다.
plugins {
    // 자바 프로젝트를 위한 필수 플러그인
    id 'java'
    // 스프링 부트 플러그인. apply(false)는 지금 당장 적용하지 않고,
    // 하위 모듈에서 필요할 때 선택적으로 적용할 수 있도록 준비만 해두는 설정입니다.
    id 'org.springframework.boot' apply(false)
    // 스프링 부트의 의존성(라이브러리) 버전을 관리해주는 플러그인
    id 'io.spring.dependency-management'
    // 코드 스타일을 자동으로 검사하고 수정해주는 'Spotless' 플러그인. 역시 apply(false)로 설정.
    id 'com.diffplug.spotless' apply(false)
    // AsciiDoc(.adoc) 문서를 HTML로 변환해주는 'Asciidoctor' 플러그인. Spring REST Docs에 필요. 역시 apply(false)로 설정.
    id 'org.asciidoctor.jvm.convert' apply(false)
}

// 루트 프로젝트를 포함한 모든 하위 프로젝트에 공통으로 적용될 설정을 정의합니다.
allprojects {
    // 프로젝트의 그룹 ID. 보통 회사의 도메인을 역순으로 사용합니다 (예: com.example).
    group = projectGroup
    // 프로젝트의 버전.
    version = applicationVersion

    // 의존성을 다운로드할 원격 저장소를 지정합니다.
    repositories {
        // 가장 대표적인 자바 라이브러리 저장소인 'Maven Central'을 사용합니다.
        mavenCentral()
    }
}

// 루트 프로젝트를 제외한 모든 '하위 프로젝트'에만 적용될 설정을 정의합니다.
subprojects {
    // 이 모듈을 다른 모듈에서 라이브러리로 사용할 수 있게 해주는 'java-library' 플러그인을 적용합니다.
    apply plugin: 'java-library'
    // 스프링 부트 플러그인을 적용합니다.
    apply plugin: 'org.springframework.boot'
    // 스프링 의존성 관리 플러그인을 적용합니다.
    apply plugin: 'io.spring.dependency-management'

    // 자바 관련 설정을 정의합니다.
    java {
        // 컴파일과 실행에 사용할 JDK 버전을 설정합니다.
        toolchain {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        }
    }

    // 모든 하위 프로젝트에 공통으로 들어갈 의존성을 정의합니다.
    dependencies {
        // 스프링 부트 테스트 스타터 (테스트 코드 작성에 필수)
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        // JUnit 5 테스트를 실행하기 위한 런처
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    // 스프링 부트의 실행 가능한 jar 파일(bootJar) 생성을 비활성화합니다.
    // 멀티모듈에서는 보통 하나의 최종 애플리케이션 모듈만 bootJar를 생성합니다.
    bootJar.enabled = false
    // 대신 표준 라이브러리 jar 파일 생성을 활성화합니다.
    jar.enabled = true

    // 'test'라는 이름의 기본 테스트 태스크 설정을 가져와 수정합니다.
    tasks.named('test') {
        // JUnit 5 플랫폼을 사용하여 테스트를 실행하도록 설정합니다.
        useJUnitPlatform()
    }

    // 기본 'test' 태스크의 상세 설정입니다.
    test {
        // JUnit 5 플랫폼을 사용합니다.
        useJUnitPlatform {
            // 'develop' 또는 'restdocs' 태그가 붙은 테스트는 기본 'test' 실행 시 제외합니다.
            excludeTags('develop', 'restdocs')
        }
        // 테스트 실행 시 JVM에 전달할 인자를 설정합니다. '-Xshare:off'는 클래스 공유 기능을 비활성화합니다.
        jvmArgs '-Xshare:off'
    }

    // 'unitTest'라는 이름의 새로운 테스트 태스크를 등록(생성)합니다.
    tasks.register('unitTest', Test) {
        // 태스크 그룹을 'verification'(검증)으로 지정합니다.
        group = 'verification'
        // 아래 두 줄은 태스크가 사용하는 클래스와 클래스 경로를 명시적으로 지정하여 안정성을 높입니다.
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath
        useJUnitPlatform {
            // 'develop', 'context', 'restdocs' 태그가 붙은 테스트를 모두 제외하고 실행합니다.
            // 즉, 순수한 단위 테스트만 실행하려는 목적입니다.
            excludeTags('develop', 'context', 'restdocs')
        }
    }

    // 'contextTest'라는 이름의 새로운 테스트 태스크를 등록합니다.
    tasks.register('contextTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath
        useJUnitPlatform {
            // 'context' 태그가 붙은 테스트만 포함하여 실행합니다.
            // 주로 스프링 컨텍스트를 로드하는 통합 테스트를 위한 목적입니다.
            includeTags('context')
        }
    }

    // 'restDocsTest'라는 이름의 새로운 테스트 태스크를 등록합니다.
    tasks.register('restDocsTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath
        useJUnitPlatform {
            // 'restdocs' 태그가 붙은 테스트만 포함하여 실행합니다.
            // Spring REST Docs API 문서 생성을 위한 테스트만 실행하려는 목적입니다.
            includeTags('restdocs')
        }
    }

    // 'developTest'라는 이름의 새로운 테스트 태스크를 등록합니다.
    tasks.register('developTest', Test) {
        group = 'verification'
        testClassesDirs = sourceSets.test.output.classesDirs
        classpath = sourceSets.test.runtimeClasspath
        useJUnitPlatform {
            // 'develop' 태그가 붙은 테스트만 포함하여 실행합니다.
            // 개발 중에 특정 테스트 그룹만 실행하려는 목적입니다.
            includeTags('develop')
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperty 'file.encoding', 'UTF-8'
    }
}

